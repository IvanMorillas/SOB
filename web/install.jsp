<%@ page contentType="text/html" pageEncoding="UTF-8" %>
<%@ page import = "java.sql.*" %>

<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Database SQL Load</title>
    </head>
    <style>
        .error {
            color: red;
        }
        pre {
            color: green;
        }
    </style>
    <body>
        <h2>Database SQL Load</h2>
        <%
            /* How to customize:
             * 1. Update the database name on dbname.
             * 2. Create the list of tables, under tablenames[].
             * 3. Create the list of table definition, under tables[].
             * 4. Create the data into the above table, under data[]. 
             * 
             * If there is any problem, it will exit at the very first error.
             */
            String dbname = "homework1";
            String schema = "ROOT";
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            /* this will generate database if not exist */
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/" + dbname, "root", "root");
            Statement stmt = con.createStatement();
            
            /* inserting data */
            /* you have to exclude the id autogenerated from the list of columns if you have use it. */
            String data[] = new String[]{
                // Inserciones para TOPIC
                "INSERT INTO " + schema + ".TOPIC VALUES (NEXT VALUE FOR TOPIC_GEN, 'Computer Science')",
                "INSERT INTO " + schema + ".TOPIC VALUES (NEXT VALUE FOR TOPIC_GEN, 'Web Programming')",
                "INSERT INTO " + schema + ".TOPIC VALUES (NEXT VALUE FOR TOPIC_GEN, 'JavaScript')",
                "INSERT INTO " + schema + ".TOPIC VALUES (NEXT VALUE FOR TOPIC_GEN, 'Machine Learning')",
                "INSERT INTO " + schema + ".TOPIC VALUES (NEXT VALUE FOR TOPIC_GEN, 'Cyber Security')",
                
                // Inserciones para AUTHOR (algunos clientes son también autores)
                "INSERT INTO " + schema + ".AUTHOR (ID, USERNAME) VALUES (NEXT VALUE FOR AUTHOR_GEN, 'Andrew Zuo')",
                "INSERT INTO " + schema + ".AUTHOR (ID, USERNAME) VALUES (NEXT VALUE FOR AUTHOR_GEN, 'bob')",
                "INSERT INTO " + schema + ".AUTHOR (ID, USERNAME) VALUES (NEXT VALUE FOR AUTHOR_GEN, 'alice')",

                // Inserciones para CUSTOMER
                "INSERT INTO " + schema + ".CUSTOMER (ID, USERNAME, PASSWORD) VALUES (NEXT VALUE FOR CUSTOMER_GEN, 'sob', 'sob')",
                "INSERT INTO " + schema + ".CUSTOMER (ID, USERNAME, PASSWORD, AUTHOR_ID) VALUES (NEXT VALUE FOR CUSTOMER_GEN, 'alice', 'alice123', 3)",
                "INSERT INTO " + schema + ".CUSTOMER (ID, USERNAME, PASSWORD, AUTHOR_ID) VALUES (NEXT VALUE FOR CUSTOMER_GEN, 'bob', 'bob123', 2)",
                "INSERT INTO " + schema + ".CUSTOMER (ID, USERNAME, PASSWORD) VALUES (NEXT VALUE FOR CUSTOMER_GEN, 'charlie', 'charlie123')",

                // Inserciones para ARTICLE (algunos artículos públicos y otros privados)
                "INSERT INTO " + schema + ".ARTICLE (ID, TITLE, DATE, VIEWS, SUMMARY, TEXT, ISPRIVATE, AUTHOR_ID) VALUES (NEXT VALUE FOR ARTICLE_GEN, 'Async Await', TIMESTAMP('2024-06-22 00:00:00'), 3300, 'Resumen Async', 'Contenido sobre Async Await', 0, 1)", 
                "INSERT INTO " + schema + ".ARTICLE (ID, TITLE, DATE, VIEWS, SUMMARY, TEXT, ISPRIVATE, AUTHOR_ID) VALUES (NEXT VALUE FOR ARTICLE_GEN, 'Introduction to Java', TIMESTAMP('2023-09-15 00:00:00'), 1500, 'Resumen Java', 'Contenido sobre Java', 0, 2)", 
                "INSERT INTO " + schema + ".ARTICLE (ID, TITLE, DATE, VIEWS, SUMMARY, TEXT, ISPRIVATE, AUTHOR_ID) VALUES (NEXT VALUE FOR ARTICLE_GEN, 'Advanced Machine Learning', TIMESTAMP('2023-12-01 00:00:00'), 4800, 'Resumen ML', 'Contenido avanzado de ML', 1, 1)", 
                "INSERT INTO " + schema + ".ARTICLE (ID, TITLE, DATE, VIEWS, SUMMARY, TEXT, ISPRIVATE, AUTHOR_ID) VALUES (NEXT VALUE FOR ARTICLE_GEN, 'Cyber Security Essentials', TIMESTAMP('2023-01-20 00:00:00'), 2900, 'Resumen CyberSec', 'Contenido sobre seguridad cibernética', 0, 3)", 
                "INSERT INTO " + schema + ".ARTICLE (ID, TITLE, DATE, VIEWS, SUMMARY, TEXT, ISPRIVATE, AUTHOR_ID) VALUES (NEXT VALUE FOR ARTICLE_GEN, 'JavaScript Promises', TIMESTAMP('2023-08-30 00:00:00'), 2600, 'Resumen Promises', 'Contenido sobre Promesas en JavaScript', 1, 2)",

                // Asociaciones entre ARTICLE y TOPIC
                "INSERT INTO " + schema + ".ARTICLE_TOPIC (ARTICLE_ID, TOPIC_ID) VALUES (1, 1)",  // Async Await - Computer Science
                "INSERT INTO " + schema + ".ARTICLE_TOPIC (ARTICLE_ID, TOPIC_ID) VALUES (1, 2)",  // Async Await - Web Programming
                "INSERT INTO " + schema + ".ARTICLE_TOPIC (ARTICLE_ID, TOPIC_ID) VALUES (2, 1)",  // Introduction to Java - Computer Science
                "INSERT INTO " + schema + ".ARTICLE_TOPIC (ARTICLE_ID, TOPIC_ID) VALUES (3, 4)",  // Advanced ML - Machine Learning
                "INSERT INTO " + schema + ".ARTICLE_TOPIC (ARTICLE_ID, TOPIC_ID) VALUES (4, 5)",  // CyberSec Essentials - Cyber Security
                "INSERT INTO " + schema + ".ARTICLE_TOPIC (ARTICLE_ID, TOPIC_ID) VALUES (5, 3)",  // JS Promises - JavaScript

                // Asociaciones entre CUSTOMER y sus artículos favoritos (favArticles)
                "INSERT INTO " + schema + ".CUSTOMER_ARTICLE (CUSTOMER_ID, FAVARTICLES_ID) VALUES (1, 1)",  // 'sob' - Async Await
                "INSERT INTO " + schema + ".CUSTOMER_ARTICLE (CUSTOMER_ID, FAVARTICLES_ID) VALUES (2, 2)",  // 'alice' - Introduction to Java
                "INSERT INTO " + schema + ".CUSTOMER_ARTICLE (CUSTOMER_ID, FAVARTICLES_ID) VALUES (3, 4)",  // 'bob' - CyberSec Essentials
                "INSERT INTO " + schema + ".CUSTOMER_ARTICLE (CUSTOMER_ID, FAVARTICLES_ID) VALUES (4, 3)",  // 'charlie' - Advanced ML
            };

            for (String datum : data) {
                if (stmt.executeUpdate(datum)<=0) {
                    out.println("<span class='error'>Error inserting data: " + datum + "</span>");
                    return;
                }
                out.println("<pre> -> " + datum + "<pre>");
            }
        %>
        <button onclick="window.location='<%=request.getSession().getServletContext().getContextPath()%>'">Go home</button>
    </body>
</html>
